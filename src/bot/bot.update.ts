import { Update, Start, Ctx, On, Action, Command } from 'nestjs-telegraf';
import { Context } from './interfaces/context.interface';
import { Markup } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { Injectable } from '@nestjs/common';
import { Message } from 'telegraf/typings/core/types/typegram';
import { BotService } from './bot.service';
import { ChatType, ChatStatus } from '@prisma/client';

@Injectable()
@Update()
export class BotUpdate {
  constructor(
    private configService: ConfigService,
    private botService: BotService,
  ) {}

  @Start()
  async startCommand(@Ctx() ctx: Context) {
    const user = await this.botService.createUser(ctx.from.id, ctx.from.username);
    const isAdmin = user.isAdmin;

    if (isAdmin) {
      await ctx.reply('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', Markup.keyboard([
        ['üìã –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üì® –†–∞—Å—Å—ã–ª–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
      ]).resize());
      return;
    }

    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', Markup.keyboard([
      ['‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?']
    ]).resize());
  }

  @On('text')
  async handleMessage(@Ctx() ctx: Context) {
    const user = await this.botService.getUserByTelegramId(ctx.from.id);
    const isAdmin = user?.isAdmin;
    const text = (ctx.message as Message.TextMessage).text;

    if (isAdmin) {
      if (text === '/cancel') {
        return this.cancelReply(ctx);
      }
      if (text === 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã') {
        return this.showActiveChats(ctx);
      }
      if (text === 'üì® –†–∞—Å—Å—ã–ª–∫–∞') {
        ctx.session.isMassSending = true;
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª–∞–º–∏). –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel');
        return;
      }
      if (ctx.session.replyToUser) {
        const userId = BigInt(ctx.session.replyToUser);
        await ctx.telegram.sendMessage(Number(userId), text);
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
        return;
      }
      if (ctx.session.isMassSending) {
        const users = await this.botService.getAllUsers();
        let successCount = 0;
        let errorCount = 0;
        
        const message = ctx.message as Message.TextMessage;
        
        for (const user of users) {
          try {
            if (user.telegramId) {
              await ctx.telegram.sendMessage(Number(user.telegramId), message.text);
              successCount++;
            }
          } catch (error) {
            errorCount++;
            console.error(`Failed to send message to user ${user.telegramId}: ${error.message}`);
          }
        }

        delete ctx.session.isMassSending;
        await ctx.reply(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${errorCount}`);
        return;
      }

      return this.handleAdminMessage(ctx);
    }

    if (text === '‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?') {
      await ctx.reply(`–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞:

1. –î–æ—Å—Ç–∞–≤–∫–∞ –Ø–Ω–¥–µ–∫—Å
   - –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

2. –°–î–≠–ö
   - –ê–¥—Ä–µ—Å –ü–í–ó –∏–ª–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

3. –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏
   - –ü–æ–ª–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º
   - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üõç –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏`);
      return;
    }

    if (text === 'üìû –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å') {
      return this.handleStartChat(ctx, 'order');
    }

    if (ctx.session.chatId) {
      const chat = await this.botService.getChat(ctx.session.chatId);
      if (chat?.status === ChatStatus.CLOSED) {
        delete ctx.session.chatId;
        delete ctx.session.isWaitingForAdmin;
        await ctx.reply('–≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.');
        return;
      }
    }

    if (ctx.session.isWaitingForAdmin) {
      return this.forwardToAdmin(ctx);
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!ctx.session.chatId) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const chat = await this.botService.createChat(ctx.from.id, ChatType.QUESTION);
      ctx.session.chatId = chat.id;
    }

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    return this.forwardToAdmin(ctx);
  }

  @On(['photo', 'document', 'voice', 'video_note', 'video'])
  async handleMedia(@Ctx() ctx: Context) {
    const user = await this.botService.getUserByTelegramId(ctx.from.id);
    const isAdmin = user?.isAdmin;

    if (isAdmin && ctx.session.isMassSending) {
      const users = await this.botService.getAllUsers();
      let successCount = 0;
      let errorCount = 0;

      const message = ctx.message as Message.PhotoMessage | Message.DocumentMessage | Message.VoiceMessage | Message.VideoNoteMessage | Message.VideoMessage;
      
      for (const user of users) {
        try {
          if (user.telegramId) {
            if ('photo' in message) {
              const photo = message.photo[message.photo.length - 1];
              await ctx.telegram.sendPhoto(Number(user.telegramId), photo.file_id, {
                caption: message.caption
              });
            } else if ('document' in message) {
              await ctx.telegram.sendDocument(Number(user.telegramId), message.document.file_id, {
                caption: message.caption
              });
            } else if ('voice' in message) {
              await ctx.telegram.sendVoice(Number(user.telegramId), message.voice.file_id, {
                caption: message.caption
              });
            } else if ('video_note' in message) {
              await ctx.telegram.sendVideoNote(Number(user.telegramId), message.video_note.file_id);
            } else if ('video' in message) {
              await ctx.telegram.sendVideo(Number(user.telegramId), message.video.file_id, {
                caption: message.caption
              });
            }
            successCount++;
          }
        } catch (error) {
          errorCount++;
          console.error(`Failed to send message to user ${user.telegramId}: ${error.message}`);
        }
      }

      delete ctx.session.isMassSending;
      await ctx.reply(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${errorCount}`);
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (isAdmin && ctx.session.replyToUser) {
      const userId = BigInt(ctx.session.replyToUser);
      const message = ctx.message as Message.PhotoMessage | Message.DocumentMessage | Message.VoiceMessage | Message.VideoNoteMessage | Message.VideoMessage;

      if ('photo' in message) {
        const photo = message.photo[message.photo.length - 1];
        await ctx.telegram.sendPhoto(Number(userId), photo.file_id, {
          caption: message.caption
        });
      } else if ('document' in message) {
        await ctx.telegram.sendDocument(Number(userId), message.document.file_id, {
          caption: message.caption
        });
      } else if ('voice' in message) {
        await ctx.telegram.sendVoice(Number(userId), message.voice.file_id, {
          caption: message.caption
        });
      } else if ('video_note' in message) {
        await ctx.telegram.sendVideoNote(Number(userId), message.video_note.file_id);
      } else if ('video' in message) {
        await ctx.telegram.sendVideo(Number(userId), message.video.file_id, {
          caption: message.caption
        });
      }

      await ctx.reply('–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if (!ctx.session.chatId) {
      const chat = await this.botService.createChat(ctx.from.id, ChatType.QUESTION);
      ctx.session.chatId = chat.id;
    }

    const message = ctx.message as Message.PhotoMessage | Message.DocumentMessage | Message.VoiceMessage | Message.VideoNoteMessage | Message.VideoMessage;
    const admins = await this.botService.getAdmins();

    const messageText = `
–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
–û—Ç: ${ctx.from.username ? '@' + ctx.from.username : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
ID: ${ctx.from.id}
${'caption' in message && message.caption ? `–¢–µ–∫—Å—Ç: ${message.caption}` : ''}
`;

    for (const admin of admins) {
      try {
        if ('photo' in message) {
          const photo = message.photo[message.photo.length - 1];
          await ctx.telegram.sendPhoto(Number(admin.telegramId), photo.file_id, {
            caption: messageText,
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${ctx.session.chatId}`)
            ])
          });
        } else if ('document' in message) {
          await ctx.telegram.sendDocument(Number(admin.telegramId), message.document.file_id, {
            caption: messageText,
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${ctx.session.chatId}`)
            ])
          });
        } else if ('voice' in message) {
          await ctx.telegram.sendVoice(Number(admin.telegramId), message.voice.file_id, {
            caption: messageText,
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${ctx.session.chatId}`)
            ])
          });
        } else if ('video_note' in message) {
          await ctx.telegram.sendVideoNote(Number(admin.telegramId), message.video_note.file_id, {
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${ctx.session.chatId}`)
            ])
          });
        } else if ('video' in message) {
          await ctx.telegram.sendVideo(Number(admin.telegramId), message.video.file_id, {
            caption: messageText,
            ...Markup.inlineKeyboard([
              Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${ctx.session.chatId}`)
            ])
          });
        }
      } catch (error) {
        console.error(`Failed to send media to admin ${admin.telegramId}: ${error.message}`);
      }
    }

    await ctx.reply('–í–∞—à–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }

  private async showActiveChats(ctx: Context) {
    const chats = await this.botService.getActiveChats();
    
    if (chats.length === 0) {
      await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤');
      return;
    }

    for (const chat of chats) {
      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const lastMessage = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1] : null;
      const messageText = `
–¢–∏–ø: ${chat.type === ChatType.QUESTION ? '‚ùì –í–æ–ø—Ä–æ—Å' : 'üõç –ó–∞–∫–∞–∑'}
–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${chat.user.username || chat.user.telegramId}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${lastMessage?.text || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}
`;
      await ctx.reply(messageText, {
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${chat.id}`),
            Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', `close_${chat.id}`)
          ]
        ])
      });
    }
  }

  private async handleStartChat(ctx: Context, type: 'question' | 'order') {
    const userId = ctx.from.id;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeChats = await this.botService.getActiveChats();
    const userActiveChat = activeChats.find(chat => chat.user.telegramId === userId.toString());
    if (userActiveChat) {
      await this.botService.closeChat(userActiveChat.id);
    }
    
    const chatType = type === 'order' ? ChatType.ORDER : ChatType.QUESTION;
    const chat = await this.botService.createChat(userId, chatType);
    
    ctx.session.type = type;
    ctx.session.chatId = chat.id;
    ctx.session.isWaitingForAdmin = true;
    
    const message = type === 'question' ? 
      '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å' : 
      '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å';
    await ctx.reply(message);
  }

  private async forwardToAdmin(ctx: Context) {
    if (!ctx.session.chatId) {
      await ctx.reply('–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    const admins = await this.botService.getAdmins();
    const message = ctx.message as Message.TextMessage;

    const messageText = `
–ù–æ–≤–æ–µ ${ctx.session.type === 'question' ? '–æ–±—Ä–∞—â–µ–Ω–∏–µ' : '–∑–∞–∫–∞–∑'}
–û—Ç: ${ctx.from.username ? '@' + ctx.from.username : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
ID: ${ctx.from.id}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${message.text}
`;

    await this.botService.createMessage(ctx.session.chatId, ctx.from.id, message.text, false);
    
    for (const admin of admins) {
      await ctx.telegram.sendMessage(Number(admin.telegramId), messageText, {
        ...Markup.inlineKeyboard([
          Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_${ctx.session.chatId}`)
        ])
      });
    }
    
    await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }

  @Action(/reply_(\d+)/)
  async handleReplyButton(@Ctx() ctx: Context) {
    const callbackQuery = ctx.callbackQuery as { data: string };
    const match = callbackQuery.data.match(/reply_(\d+)/);
    if (!match) return;

    const chatId = parseInt(match[1]);
    const chat = await this.botService.getChat(chatId);
    
    ctx.session.replyToUser = String(chat.user.telegramId);
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)');
  }

  @Action(/close_(\d+)/)
  async handleCloseChat(@Ctx() ctx: Context) {
    const callbackQuery = ctx.callbackQuery as { data: string };
    const match = callbackQuery.data.match(/close_(\d+)/);
    if (!match) return;

    const chatId = parseInt(match[1]);
    const chat = await this.botService.getChat(chatId);
    await this.botService.closeChat(chatId);
    
    await ctx.telegram.sendMessage(Number(chat.user.telegramId), '–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    await ctx.reply('–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç');
  }

  @Command('cancel')
  async cancelReply(@Ctx() ctx: Context) {
    if (ctx.session.replyToUser) {
      const userId = ctx.session.replyToUser;
      delete ctx.session.replyToUser;
      await ctx.reply('–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω');
      await ctx.telegram.sendMessage(Number(userId), '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥');
      return;
    }
  }

  private async handleAdminMessage(ctx: Context) {
    const message = ctx.message as Message.TextMessage;
    if (!message?.reply_to_message) {
      return;
    }

    const replyMsg = message.reply_to_message as Message.TextMessage;
    const match = replyMsg.text?.match(/ID: (\d+)/);
    if (!match) return;

    const userId = parseInt(match[1]);
    const chat = await this.botService.getActiveChats();
    const userChat = chat.find(c => c.user.telegramId === userId.toString());
    
    if (!userChat) {
      await ctx.reply('–û—à–∏–±–∫–∞: —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç');
      return;
    }

    await this.botService.createMessage(userChat.id, ctx.from.id, message.text, true);
    await ctx.telegram.sendMessage(userId, message.text);
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    
    ctx.session.replyToUser = String(userId);
  }
} 