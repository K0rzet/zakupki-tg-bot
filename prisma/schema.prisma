// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  telegramId        String    @unique
  username          String?
  firstName         String?
  lastName          String?
  isAdmin           Boolean   @default(false)
  isBanned          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  chats            Chat[]
  messages         Message[]
}

model Chat {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      ChatType
  status    ChatStatus @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  text      String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum ChatType {
  QUESTION
  ORDER
}

enum ChatStatus {
  ACTIVE
  CLOSED
}

enum Gender {
  MALE
  FEMALE
}

model Shoe {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  color       String
  gender      Gender
  sizes       Int[]
  price       Int
  images      String[] // Добавляем поле для хранения URL изображений
}